apiVersion: v1
kind: Namespace
metadata:
  name: '{{k8s_namespace}}'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: '{{k8s_namespace}}'
  name: '{{app_name}}'
  labels:
    app.kubernetes.io/name: '{{k8s_namespace}}-{{app_name}}'
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: '{{k8s_namespace}}-{{app_name}}'
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: '{{k8s_namespace}}-{{app_name}}'
    spec:
      containers:
      - name: '{{app_name}}'
        image: '{{aws_account_id}}.dkr.ecr.{{aws_region}}.amazonaws.com/{{ecr_repo}}:{{docker_image_tag}}'
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
        env:
        - name: IMAGE_URL
          value: '{{image_url}}'
        resources:
          requests:
            cpu: "256m"
            memory: "512Mi"
      tolerations:
      - key: "eks.amazonaws.com/compute-type"
        operator: "Equal"
        value: "fargate"
        effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  namespace: '{{k8s_namespace}}'
  name: '{{app_name}}'
  labels:
    app.kubernetes.io/name: '{{k8s_namespace}}-{{app_name}}'
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
  selector:
    app.kubernetes.io/name: '{{k8s_namespace}}-{{app_name}}'
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: '{{k8s_namespace}}'
  name: '{{k8s_namespace}}-{{app_name}}'
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
  labels:
    app.kubernetes.io/name: '{{k8s_namespace}}-{{app_name}}'
spec:
  ingressClassName: alb
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: '{{app_name}}'
            port:
              number: 80
